package com.serverless;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.serverless.data.AuthPolicy;
import com.serverless.data.Subscriber;
import com.serverless.data.TokenAuthorizerContext;
import com.serverless.models.DynamoDBAdapter;
import org.apache.log4j.Logger;

import java.util.Map;


/**
 * Handles IO for a Java Lambda function as a custom authorizer for API Gateway
 */
public class AuthorizeSubscriberHandler implements RequestHandler<TokenAuthorizerContext, ApiGatewayResponse> {

	private static final Logger LOG = Logger.getLogger(AuthorizeSubscriberHandler.class);

	@Override
	public ApiGatewayResponse handleRequest(TokenAuthorizerContext input, Context context) {
		LOG.info("received: " + input);

        // Retrieve the incoming token generated by the API Gateway
		String token = input.getAuthorizationToken();

		// and produce the principal user identifier associated with the token
		String principalId = token;

		// Get variables from the input required to generate the policy document
		String methodArn = input.getMethodArn();
		String[] arnPartials = methodArn.split(":");
		String region = arnPartials[3];
		String awsAccountId = arnPartials[4];
		String[] apiGatewayArnPartials = arnPartials[5].split("/");
		String restApiId = apiGatewayArnPartials[0];
		String stage = apiGatewayArnPartials[1];
		String httpMethod = apiGatewayArnPartials[2];
		String resource = ""; // root resource
		if (apiGatewayArnPartials.length == 4) {
			resource = apiGatewayArnPartials[3];
		}

		// Generate the DenyAll policy document as default
		// The policy document is processed by the API Gateway
		Map<String, Object> output = new AuthPolicy(principalId,
				AuthPolicy.PolicyDocument.getDenyAllPolicy(region,
						awsAccountId,
						restApiId,
						stage)).getPolicyDocument();

		// Query the Subscriber database
		try {
			// Send to DynamoDB
			Subscriber user = DynamoDBAdapter.getInstance().getSubscriber(principalId);

			// Ensure that the subscriber has also been verified
			if (user.getIsVerified()){
				// Generate the AllowAll policy document to be processed by the API Gateway
				output = new AuthPolicy(principalId,
						AuthPolicy.PolicyDocument.getAllowAllPolicy(region,
								awsAccountId,
								restApiId,
								stage)).getPolicyDocument();
			}

		}catch(Exception e){
			LOG.error(e,e);
			Response responseBody = new Response("Unauthorized", output);
			return ApiGatewayResponse.builder()
					.setStatusCode(500)
					.setObjectBody(responseBody)
					.build();
		}

		Response responseBody = new Response("Authorized", output);
		return ApiGatewayResponse.builder()
				.setStatusCode(200)
				.setObjectBody(responseBody)
				.build();
	}
}
